<pre class='metadata'>
Title: shape-to-query
Shortname: s2q
Editor: Tomasz Pluskiewicz
Abstract: Library for generating SPARQL from SHACL Shapes
Status: LD
Markup Shorthands: markdown yes
Block Elements: s2q-snippet
Repository: https://github.com/hypermedia-app/shape-to-query
URL: https://shape-to-query.hypermedia.app/docs
</pre>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.1.0/dist/themes/light.css" />
<script type="module" src="./lib/s2q-snippet.js" async defer>
</script>

# Introduction # {#introduction}

The library translates SHACL Node Shapes to [[!sparql11-overview|SPARQL]] Queries in the form of [[sparql11-query#construct|CONSTRUCT]] and [[sparql11-update#deleteWhere|DELETE]].

# Getting started # {#gettings-started}

## Installation ## {#installation}

The library is written in TypeScript and distributed as an NPM package:

```shell
npm i --save @hydrofoil/shape-to-query
```

## Basic usage ## {#basic-usage}

```ts
import type { GraphPointer } from 'clownface'
import { constructQuery } from '@hydrofoil/shape-to-query'

let shape: GraphPointer

const queryString = constructQuery(shape).build()
```

# SHACL Constraints # {#shacl-constraints}

## Targets ## {#target}

### Node targets (`sh:targetNode`) ### {#target-node}

Note: Base spec: [[shacl#targetNode]]

A single `sh:targetNode` becomes the root subject, directly in the generated triple patterns

<div class="example" id="example-targetNode">
  Single target node

  <s2q-snippet>
    <pre class="include-code">
    path: example/targetNode.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/targetNode.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

When there are multiple target nodes, a variable is used for the root focus node and the target nodes are provided as inline data using [[sparql11-query#inline-data|VALUES]] claues.

<div class="example" id="example-targetNode-multi">
  Multiple target nodes

  <s2q-snippet>
    <pre class="include-code">
    path: example/targetNode-multi.ttl
    highlight: turtle
    </pre>
    <pre class="include-code">
    path: example/targetNode-multi.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

# SHACL Advanced Features # {#shacl-advanced}

Advisement: This section uses the currently published [[!shacl-af|SHACL Advanced Features]] spec as well as parts of the [Community Group Draft](https://w3c.github.io/shacl/shacl-af). The implementation may become outdated in time or deviate from the spec to accommodate for the specifics of generating queries.

Issue(19): Issue epic on GitHub

## Node expressions ## {#shacl-advanced-node-expressions}

The core of the support for node expressions is the new `sh:values` predicate, which allows the query generator to provide values for the predicate. Rather than following the `sh:path` to find the match the RDF terms, the node expressions are define the objects of the property. Different kinds of node expressions can be used to generate subselects or computed properties.

Note: Because the result must be a triple patterns where the node expression's output is the subject or object, only [[shacl#property-path-predicate|Predicate Path]] and [[shacl#property-path-inverse|Inverse Path]] can be used with `sh:values`.

Issue(20): Multiple objects of `sh:values` should form a `UNION`

### Focus node expression ### {#shacl-focus-node-expressions}

The object of the property at `sh:path` is the current focus node

<div class="example" id="example-focus-node">
  Focus node expressions

  <s2q-snippet>

  <pre class="include-code">
  path: example/values-focus-node.ttl
  highlight: turtle
  </pre>

  <pre class="include-code">
  path: example/values-focus-node.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

### Constant term expression ### {#shacl-constant-term-expressions}

The objects of `sh:values` become directly asserted as the objects of the property.

<div class="example" id="example-constant">
  Two properties with constant values

  <s2q-snippet>
  
  <pre class="include-code">
  path: example/values-constant.ttl
  highlight: turtle
  </pre>
  
  <pre class="include-code">
  path: example/values-constant.ttl.rq
  highlight: sparql
  </pre>
  
  </s2q-snippet>
</div>
