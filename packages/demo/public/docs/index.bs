<pre class='metadata'>
Title: @hydrofoil/shape-to-query
Shortname: s2q
Editor: Tomasz Pluskiewicz
Abstract: Library for generating SPARQL from SHACL Shapes
Status: LD
Markup Shorthands: markdown yes
Block Elements: s2q-snippet
Repository: https://github.com/hypermedia-app/shape-to-query
URL: https://shape-to-query.hypermedia.app/docs
</pre>

<pre class=include>
path: ../include/shared.bs
</pre>

# Introduction # {#introduction}

The library translates SHACL Node Shapes to [[!sparql11-overview|SPARQL]] Queries in the form of [[sparql11-query#construct|CONSTRUCT]] and [[sparql11-update#deleteWhere|DELETE]].

# Getting started # {#gettings-started}

## Installation ## {#installation}

The library is written in TypeScript and distributed as an NPM package:

```shell
npm i --save @hydrofoil/shape-to-query
```

## Basic usage ## {#basic-usage}

```ts
import type { GraphPointer } from 'clownface'
import { constructQuery } from '@hydrofoil/shape-to-query'

let shape: GraphPointer

const queryString = constructQuery(shape).build()
```

## About examples below ## {#about-examples}

All the examples shown in this documentation are based on a toy dataset [tbbt-ld](https://npm.im/tbbt-ld) which contains resources
describing characters from the TV series The Big Bang Theory. To look nicer, the `localhost` URLs have been replaced with 
fictitious a `tbbt.tv` domain.

# SHACL Constraints # {#shacl-constraints}

Issue(42): Issue epic on GitHub

## Targets ## {#target}

Targets are used to match specific focus nodes of a given Node Shape. The most common, and natural way is to define
a target of the root shape. However, targets declared in nested shapes, such as when using [[#shacl-logical-constraints]] or 
[[#shacl-node]], can also be used to narrow down the query results.

Note: Multiple target types are combined with `UNION`

### Node targets (`sh:targetNode`) ### {#target-node}

Note: SHACL spec: [[shacl#targetNode]]

Whether there is one or multiple target nodes, a variable is used for the root focus node and the target nodes are provided as inline data using [[sparql11-query#inline-data|VALUES]] clause.

<div class="example">
  Multiple target nodes

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/targetNode.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/targetNode.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

### Class-based Targets (`sh:targetClass`) ### {#target-class}

Note: SHACL spec: [[shacl#targetClass]]

Single target class is directly matched with the focus node

<div class="example">
  Target resources of type `schema:Person`

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/targetClass.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/targetClass.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Multiple target classes are rendered as `VALUES`

<div class="example">
  Target resources of type `schema:Person` **and** `foaf:Person`  

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/targetClass-multi.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/targetClass-multi.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

### Subjects-of targets (`sh:targetSubjectsOf`) ### {#target-subjects-of}

Note: SHACL spec: [[shacl#targetSubjectsOf]]

Targets resources which are the subject of a given predicate

<div class="example">
  Find resources which are parents

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/targetSubjectsOf.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/targetSubjectsOf.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

### Subjects-of targets (`sh:targetObjectsOf`) ### {#target-objects-of}

Note: SHACL spec: [[shacl#targetObjectsOf]]

Targets resources which are the object of a given predicate

<div class="example">
  Find resources which are children

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/targetObjectsOf.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/targetObjectsOf.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

## Core Constraint Components ## {#shacl-core-components}

### Value Type Constraint Components ### {#shacl-value-type-constraints}

#### sh:class #### {#shacl-class}

Note: SHACL spec: [[shacl#ClassConstraintComponent]]

<div class="example">
  Restrict objects of a property to a specific class

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/class.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/class.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

<div class="example">
  Restrict focus node to instances of a specific class

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/class-node-shape.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/class-node-shape.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Note: Similar can be achieved using `sh:targetClass` but it is more natural to use `sh:class` when nesting shapes with `sh:node`

#### sh:datatype #### {#shacl-datatype}

Note: SHACL spec: [[shacl#DatatypeConstraintComponent]]

<div class="example">
  Restrict objects of a property to a specific datatype

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/datatype.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/datatype.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>


#### sh:nodeKind #### {#shacl-node-kind-constraint}

<div class="example">
  Use `sh:nodeKind` to restrict focus node and property nodes

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/node-kind.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/node-kind.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

### Value Range Constraint Components ### {#shacl-range-constraints}

#### sh:minExclusive #### {#shacl-minExclusive}

Note: SHACL spec: [[shacl#MinExclusiveConstraintComponent]]

<div class="example">
  Restrict objects of a property to a specific range 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/minExclusive.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/minExclusive.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

#### sh:minInclusive #### {#shacl-minInclusive}

Note: SHACL spec: [[shacl#MinInclusiveConstraintComponent]]

<div class="example">
  Restrict objects of a property to a specific range 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/minInclusive.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/minInclusive.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

#### sh:maxExclusive #### {#shacl-maxExclusive}

Note: SHACL spec: [[shacl#MaxExclusiveConstraintComponent]]

<div class="example">
  Restrict objects of a property to a specific range 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/maxExclusive.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/maxExclusive.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>



#### sh:maxInclusive #### {#shacl-maxInclusive}

Note: SHACL spec: [[shacl#MaxInclusiveConstraintComponent]]

<div class="example">
  Restrict objects of a property to a specific range 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/maxInclusive.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/maxInclusive.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

### String-based Constraint Components ### {#shacl-string-constraints}

#### sh:pattern #### {#shacl-pattern}

Note: SHACL spec: [[shacl#PatternConstraintComponent]]

<div class="example">
  Filter only those resources whose family name starts with "B" or "C", case-insensitive 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/pattern.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/pattern.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

#### sh:languageIn #### {#shacl-language-in}

Note: SHACL spec: [[shacl#LanguageInConstraintComponent]]

<div class="example">
  Filter job titles to English and German 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/constraint/languageIn.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/constraint/languageIn.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

### Logical Constraint Components ### {#shacl-logical-constraints}

The elements of a `sh:or` list are shapes and thus, they can be used both to define alternative paths to construct in the constructed graph, 
or add filters to filter out according to the shapes' constraints.

#### sh:and #### {#shacl-and}

Note: SHACL spec: [[shacl#AndConstraintComponent]]

Combines all paths and constraints from the list of shapes.

<div class="example">
  Filter characters who know Sheldon Cooper and are a microbiologist 

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/and.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/and.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

#### sh:or #### {#shacl-or}

Note: SHACL spec: [[shacl#OrConstraintComponent]]

<div class="example">
  Get `schema:givenName` and `schema:familyName` but only of those resources which have either `schema:parent` or `schema:children` properties

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/or.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/or.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Issue: Add example of `sh:or` used in `sh:property` when more useful constraints are implemented 

### Shape-based Constraint Components ### {#shacl-shape-based-constraints}

#### sh:node #### {#shacl-node}

When added to a shape, `sh:node` allows to restrict a given value node to another shape. 

The is most commonly use case is describing deep graph structures (as an alternative to complex [[shacl#property-paths|SHACL Property Paths]]).

<div class="example">
  Find names of the root focus node(s) and objects of their `schema:knows` property

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/node-deep.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/node-deep.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

By reusing a shape, it is also possible to apply it to multiple subgraphs.

<div class="example">
  Describes the root focus node and objects of `schema:parent` and `schema:children` using the same `PersonShape`  

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/node-reuse.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/node-reuse.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Issue(99): Support recursive shapes using `sh:node`

### Other Constraint Components ### {#shacl-other-components}

#### sh:hasValue #### {#shacl-has-value}

Note: SHACL spec: [[shacl#HasValueConstraintComponent]]

Filters nodes whose property has the exact set of objects

<div class="example">
  Get `schema:givenName` and `schema:familyName` but only of those resources who know both Sheldon Cooper and Stuart Bloom

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/has-value.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/has-value.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Advisement: `sh:hasValue` is not currently supported as property of the root node shape and will be ignored in such case

#### sh:in #### {#shacl-in}

Note: SHACL spec: [[shacl#InConstraintComponent]]

Similar to [[#shacl-has-value]] but filters focus nodes whose property has values from the given set and no others.

<div class="example">
  Get `schema:givenName` and `schema:familyName` but only of those resources who know Sheldon Cooper or Stuart Bloom

  <s2q-snippet>
    <pre class="include-code" slot="shape">
    path: example/in.ttl
    highlight: turtle
    </pre>
    <pre class="include-code" slot="query">
    path: example/in.ttl.rq
    highlight: sparql
    </pre>
  </s2q-snippet>
</div>

Advisement: `sh:in` is not currently supported as property of the root node shape and will be ignored in such case

# SHACL Advanced Features # {#shacl-advanced}

Advisement: This section uses the currently published [[shacl-af|SHACL Advanced Features]] spec as well as parts of the [Community Group Draft](https://w3c.github.io/shacl/shacl-af). The implementation may become outdated in time or deviate from the spec to accommodate for the specifics of generating queries.

Issue(19): Issue epic on GitHub

## Node expressions ## {#shacl-advanced-node-expressions}

The core of the support for node expressions is the new `sh:values` predicate, which allows the query generator to provide values for the predicate. Rather than following the `sh:path` to find the match the RDF terms, the node expressions are define the objects of the property. Different kinds of node expressions can be used to generate subselects or computed properties.

Note: Because the result must be a triple patterns where the node expression's output is the subject or object, only [[shacl#property-path-predicate|Predicate Path]] and [[shacl#property-path-inverse|Inverse Path]] can be used with `sh:values`.

Issue(20): Multiple objects of `sh:values` should form a `UNION`

### Focus Node Expression ### {#shacl-focus-node-expressions}

Note: SHACL-AF spec: [[shacl-af#node-expressions-focus]]

The object of the property at `sh:path` is the current focus node

<div class="example">
  Focus node expressions

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/values-focus-node.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/values-focus-node.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: For a pragmatic use of Focus Node Expression, see [[#extension-node-expression-target]].

### Constant Term Expression ### {#shacl-constant-term-expressions}

Note: SHACL-AF spec: [[shacl-af#node-expressions-constant]]

The objects of `sh:values` become directly asserted as the objects of the property.

<div class="example">
  Two properties with constant values

  <s2q-snippet>
  
  <pre class="include-code" slot="shape">
  path: example/values-constant.ttl
  highlight: turtle
  </pre>
  
  <pre class="include-code" slot="query">
  path: example/values-constant.ttl.rq
  highlight: sparql
  </pre>
  
  </s2q-snippet>
</div>

### Filter Shape Expressions ### {#shacl-filter-shape-expression}

Note: SHACL-AF spec: [[shacl-af#node-expressions-filter-shape]]

Filter shapes restricts the selected values to only those conforming to the shape set to `sh:filterShape` property.

The expression requires the presence of exactly on value of `sh:filterShape` property, value of which must be SHACL Shape.
It will be used to filter the values of said property to only those conforming to that shape.

<div class="example">
  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/filter-shape.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/filter-shape.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: For a practical use of Filter Shape Expression using a [[#shacl-focus-node-expressions]]
(without `sh:nodes`), see [[#extension-node-expression-target]].

Additionally, `sh:nodes` property can be used to select different set of values nodes for that property.

<div class="example">
  Calculates separate properties for parents' names by filtering on their respective gender

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/filter-shape-nodes.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/filter-shape-nodes.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

### Function Expressions ### {#shacl-function-expression}

Note: SHACL-AF spec: [[shacl-af#node-expressions-function]]

Contrary to the name, function expressions are used to represent not only function calls but also other kinds of 
expressions:

- logical and mathematical operations,
- unary operators,
- `(NOT) IN`,
- built-in functions, such as `IRI`, `REGEX` or `CONCAT`,
- custom functions identified by any arbitrary URI.

NOTE: Read [[s2q-concepts#additive-expressions]] to learn more about how shape-to-query handles mathematical operations.

NOTE: Read [[s2q-how-tos#custom-functions]] to learn how to add register custom functions with shape-to-query.

<div class="example">
  Calculate the person's `ex:drivingExperienceYears` property as the difference between the current year and the year
  when that person had their driving license issued

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/functions.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/functions.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

### Path Expressions ### {#shacl-path-expression}

Note: SHACL-AF spec: [[shacl-af#node-expressions-path]]

Path expression is the simplest possible expression which select focus node objects at a specified path.

<div class="example">
  Find resource's parent names 

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/path.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/path.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Optionally, a path expression can have one value of `sh:nodes` property which defines the set of subjects for the path.

<div class="example">
  Find the people known to parents and spouse

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/path-nodes.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/path-nodes.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

### Distinct Expressions ### {#shacl-distinct-expression}

Note: SHACL-AF spec: [[shacl-af#distinct]]

<div class="example">
  Select only unique values of

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/distinct.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/distinct.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

### Count Expressions ### {#shacl-count-expression}

Note: SHACL-AF spec: [[shacl-af#count]]

<div class="example">
  Count the number of articles

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/count.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/count.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

### OrderBy Expressions ### {#shacl-orderBy-expression}

Note: SHACL-AF spec: [[shacl-af#orderBy]]

Use `sh:orderBy` to sort a set of focus nodes by a property from the specific path

<div class="example">
  Find 10 most recent articles

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/order-by.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/order-by.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: `sh:desc` is optional and defaults to `false`

### Limit Expressions ### {#shacl-limit}

Note: SHACL-AF spec: [[shacl-af#limit]]

Returns the first N nodes from the inner node expression

<div class="example">
  Select only one value of a resource's `schema:parent` property

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/limit.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/limit.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: `sh:limit` makes most sense when combined with `sh:orderBy` or `sh:select`

### Offset Expressions ### {#shacl-offset}

Note: SHACL-AF spec: [[shacl-af#offset]]

Skips a number of nodes from the inner node expression

<div class="example">
  Select only one value of a resource's `schema:parent` property

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/node-expression/offset.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/node-expression/offset.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: `sh:offset` makes most sense when combined with `sh:limit` and `sh:orderBy` or `sh:select`

## Expression Constraints ## {#shacl-expression-constraints}

Note: SHACL-AF spec: [[shacl-af#ExpressionConstraintComponent]]

Constrains focus nodes by evaluating [[#shacl-advanced-node-expressions]].

<div class="example">
  Select only one people who have a job title containing the word "physicist"

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/constraint/expression.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/constraint/expression.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

## SHACL Rules ## {#shacl-rules}

Note: SHACL-AF spec: [[shacl-af#rules]]

SHACL Rules provide a way insert computed data (triples) into the data graph. 

Any rule with `sh:deactivated true` will be ignored.

### Triple Rules ### {#shacl-triple-rules}

Note: SHACL-AF spec: [[shacl-af#TripleRule]]

Triple rules are a generalised way to assert new statements in the data graph. They require the `subject`, `predicate` and
`object` being provided as [[#shacl-advanced-node-expressions]].

<div class="example">
  Construct new `relatedTo` triples for all resources linked by the `children`, `parent`, or `spouse` predicates

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/rules/triple-rule.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/rules/triple-rule.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Because any arbitrary node expressions can be used, the resulting triples can be unrelated to the focus nodes itself. 

<div class="example">
  In addition to triples about each `Person`, also return a new collection resource `ex:JobTitles` which gathers all
  values of their respective `jobTitle` properties.

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/rules/triple-rule-unrelated.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/rules/triple-rule-unrelated.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: That is a major difference from [[#shacl-property-value-rules]], which is equivalent of using `sh:this` as subject.

### Property Value Rules ### {#shacl-property-value-rules}

Note: SHACL-AF spec: [[shacl-af#PropertyValueRule]]

Used throughout the [[#shacl-advanced-node-expressions]] examples, the `sh:values` is a specialised kind of triple rule 
which binds computed values to triples with the current focus node subject and property being the value of `sh:path`.

Note: An error will be thrown when the `sh:path` is not an IRI

# Extensions # {#extensions}

The shape-to-query library introduces some additional constructs which handle specific scenarios unique to generated SPARQL queries which cannot be otherwise handled with terms defined in SHACL and SHACL-AF.

ALl extensions use the namespace `https://hypermedia.app/shape-to-query#`. The preferred prefix is `s2q:`.

## Targets ## {#extension-targets}

### Node Expression Target ### {#extension-node-expression-target}

Custom targets, which are instances of `s2q:NodeExpressionTarget` ar called **Node Expression Targets**. They are used to define the focus nodes of a shape using [[shacl-af#node-expressions|Node Expressions]].

Any of the simple expressions will generate SPARQL patterns directly in the query.

<div class="example">
  Find names of resources which are elements of `ex:prop` lists

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/target/nodeExpression-path.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/target/nodeExpression-path.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Node Expression Targets become especially useful when combined with [[#shacl-limit]], [[#shacl-offset]] 
and [[#shacl-orderBy-expression]] to paginate the results and only select a subset of candidate focus
nodes, which cannot be achieved by other means of SHACL-AF. Such as in the example below, where the 
Node Expression generates a [[sparql11-query#subqueries|subselect]].

<div class="example">
  Find names of resources which are elements of `ex:prop` lists

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/target/nodeExpression-subquery.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/target/nodeExpression-subquery.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

## Node Expressions ## {#extension-expressions}

### Optional Expression ### {#extension-optional}

An optional expression is a [[rdf11-concepts#dfn-blank-node|blank node]] which has a single object of the `s2q:optional` property which is a well-formed [[shacl-af#node-expressions|Node Expression]].

<div class="example">
  Find people who do not have an address region or whose address region is Texas

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/extensions/optional.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/extensions/optional.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

## Custom rules ## {#extension-rules}

### SPO rule ### {#extension-spo-rule}

An SPO rule is a blank node with the RDF type `s2q:SPORule`. It can optionally have the properties `s2q:predicateFilter` and `s2q:objectFilter`, value of which must be a well-formed [[shacl-af#node-expressions|Node Expression]].

This rule can be used to mimic a behavior of `DESCRIBE` queries which would return all direct properties of the given focus node, which is otherwise not possible with other SHACL constructs.

<div class="example">
  Return all information about Sheldon Cooper

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/extensions/spo-rule.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/extensions/spo-rule.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Additionally, node expressions can be used to limit the predicates and objects. `sh:this` in those expressions refers to the predicate and object itself and not the subject

<div class="example">
  Return all information about Sheldon Cooper except for `schema:knows` property and values which are blank nodes

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/extensions/spo-rule-filtered.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/extensions/spo-rule-filtered.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Note: In many cases, nested node shapes with expressions and constraints are a more fitting way to represent such filters.

Expanding on the example above, `sh:filterShape` can be used to further restrict the objects in an SPO pattern by their respective properties

<div class="example">
  Find values of people's `schema:knows` property but only where that other person is a physicist.

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/extensions/spo-rule-deep-filtered.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/extensions/spo-rule-deep-filtered.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>

Finally, `SPORule` can also be used inside `sh:node` expression to select the values of any nested focus node

<div class="example">
  Find people with address and all properties of said address

  <s2q-snippet>

  <pre class="include-code" slot="shape">
  path: example/extensions/spo-rule-nested.ttl
  highlight: turtle
  </pre>

  <pre class="include-code" slot="query">
  path: example/extensions/spo-rule-nested.ttl.rq
  highlight: sparql
  </pre>

  </s2q-snippet>
</div>
